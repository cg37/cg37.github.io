<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>阶段总结</title>
    <link href="/2023/02/12/Day12_%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/"/>
    <url>/2023/02/12/Day12_%E7%AC%AC%E4%BA%8C%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="阶段总结"><a href="#阶段总结" class="headerlink" title="阶段总结"></a>阶段总结</h1><p>华为的线上笔试给人整懵了</p><p>在认真考虑报个培训班的事了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>栈与队列II</title>
    <link href="/2023/02/11/Day11_%E7%AC%AC%E4%BA%94%E7%AB%A0_%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/"/>
    <url>/2023/02/11/Day11_%E7%AC%AC%E4%BA%94%E7%AB%A0_%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="day11-第五章-栈与队列"><a href="#day11-第五章-栈与队列" class="headerlink" title="day11_第五章_栈与队列"></a>day11_第五章_栈与队列</h1><p><a href="https://leetcode.cn/problems/valid-parentheses/">20_有效的括号</a></p><h1 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20_有效的括号"></a>20_有效的括号</h1><p><a href="https://programmercarl.com/0020.%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7.html#%E9%A2%98%E5%A4%96%E8%AF%9D">文章详解</a><br><a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/">1027_删除字符串中多有相邻的重复项</a><br><a href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/">150_逆波兰表达式求值</a></p><p>括号匹配是用栈解决的经典问题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isValid</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        stack&lt;<span class="hljs-type">int</span>&gt; st;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;(&#x27;</span>) st.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;)&#x27;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;&#123;&#x27;</span>) st.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;&#125;&#x27;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;[&#x27;</span>) st.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;]&#x27;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">empty</span>() || s[i] != st.<span class="hljs-built_in">top</span>()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">else</span> st.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> st.<span class="hljs-built_in">empty</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>我觉得这种题真的应该背下来</p><h1 id="1027-删除字符串中多有相邻的重复项"><a href="#1027-删除字符串中多有相邻的重复项" class="headerlink" title="1027_删除字符串中多有相邻的重复项"></a>1027_删除字符串中多有相邻的重复项</h1><p><a href="https://programmercarl.com/1047.%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E7%9B%B8%E9%82%BB%E9%87%8D%E5%A4%8D%E9%A1%B9.html">文章详解</a></p><p>用栈存放遍历过的元素, 遍历当前元素的时候，去栈里看一下我们是不是遍历过相同数值的相邻元素。</p><h2 id="栈解法"><a href="#栈解法" class="headerlink" title="栈解法"></a>栈解法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">string <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        stack&lt;<span class="hljs-type">char</span>&gt; st;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> &amp;chr:s) &#123;<br>            <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">empty</span>() || chr!=st.<span class="hljs-built_in">top</span>()) &#123;<br>                 st.<span class="hljs-built_in">push</span>(chr); <br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>        &#125;<br>        string ans = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">while</span> (!st.<span class="hljs-built_in">empty</span>()) &#123;<br>            ans = ans + st.<span class="hljs-built_in">top</span>();<br>            st.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        <span class="hljs-built_in">reverse</span>(ans.<span class="hljs-built_in">begin</span>(),ans.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="以数组为栈的解法"><a href="#以数组为栈的解法" class="headerlink" title="以数组为栈的解法"></a>以数组为栈的解法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        string ans;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> &amp;chr : s) &#123;<br>            <span class="hljs-keyword">if</span> (ans.<span class="hljs-built_in">empty</span>() || chr != ans.<span class="hljs-built_in">back</span>()) &#123;<br>                ans.<span class="hljs-built_in">push_back</span>(chr);<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                ans.<span class="hljs-built_in">pop_back</span>();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="150-逆波兰表达式求值"><a href="#150-逆波兰表达式求值" class="headerlink" title="150_逆波兰表达式求值"></a>150_逆波兰表达式求值</h1><p><a href="https://programmercarl.com/0150.%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC.html">文章详解</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">evalRPN</span><span class="hljs-params">(vector&lt;string&gt;&amp; tokens)</span> </span>&#123;<br>        stack&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; st;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt; tokens.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-keyword">if</span>(tokens[i]==<span class="hljs-string">&quot;+&quot;</span>||tokens[i]==<span class="hljs-string">&quot;-&quot;</span>||tokens[i]==<span class="hljs-string">&quot;*&quot;</span>||tokens[i]==<span class="hljs-string">&quot;/&quot;</span>) &#123;<br>                <span class="hljs-type">long</span> <span class="hljs-type">long</span> num1 = st.<span class="hljs-built_in">top</span>();<br>                st.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-type">long</span> <span class="hljs-type">long</span> num2 = st.<span class="hljs-built_in">top</span>();<br>                st.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-keyword">if</span>(tokens[i]==<span class="hljs-string">&quot;+&quot;</span>) st.<span class="hljs-built_in">push</span>(num2+num1);   <span class="hljs-comment">//***</span><br>                <span class="hljs-keyword">if</span>(tokens[i]==<span class="hljs-string">&quot;-&quot;</span>) st.<span class="hljs-built_in">push</span>(num2-num1);<br>                <span class="hljs-keyword">if</span>(tokens[i]==<span class="hljs-string">&quot;*&quot;</span>) st.<span class="hljs-built_in">push</span>(num2*num1);<br>                <span class="hljs-keyword">if</span>(tokens[i]==<span class="hljs-string">&quot;/&quot;</span>) st.<span class="hljs-built_in">push</span>(num2/num1); <br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                st.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">stoll</span>(tokens[i]));<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> ans;<br>        ans = st.<span class="hljs-built_in">top</span>();<br>        st.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>重点对这句解析一下</p><pre><code class="hljs">```if(tokens[i]==&quot;/&quot;) st.push(num2/num1);```</code></pre><p>入栈队列为<code>82/</code>,则表达式为<code>8/2</code>, 出栈时<code>num2 = 8</code>, <code>num1 = 2</code>;<br>所以<code>st.push(num2/num1)</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>栈</tag>
      
      <tag>队列</tag>
      
      <tag>逆波兰表达式&quot;</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>栈与队列I</title>
    <link href="/2023/02/10/Day10_%E7%AC%AC%E4%BA%94%E7%AB%A0_%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/"/>
    <url>/2023/02/10/Day10_%E7%AC%AC%E4%BA%94%E7%AB%A0_%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="Day10-第五章-栈与队列"><a href="#Day10-第五章-栈与队列" class="headerlink" title="Day10_第五章_栈与队列"></a>Day10_第五章_栈与队列</h1><p><a href="https://leetcode.cn/problems/implement-queue-using-stacks/">232_用栈实现队列</a></p><p><a href="https://leetcode.cn/problems/implement-stack-using-queues/">225_用队列实现栈</a></p><p><strong>队列, 先进先出; 栈, 先进后出</strong>;</p><ul><li><p>Q1 C++中stack是容器吗;</p><p>栈和队列是C++ STL(C++)标准库中的两个数据结构, 栈是以底层容器完成其所有的功能, 对外提供统一的接口, 底层容器是可插拔的, 我们可以控制使用哪一种容器来实现栈的功能;</p><p>STL中栈不被归为容器, 而是容器适配器(cotainer adapter)</p></li><li><p>我们使用的stack属于哪个版本的STL;</p><p>共有三个版本的STL;</p><ol><li>HP STL 其他版本的C++ STL; 以HP STL为蓝本实现出来的。</li><li>P.J.Plauger STL;</li><li>SGI STL, Silicon Graphics Computer Systems公司参照HP STL实现，</li></ol><p>  栈和队列是SGI STL里面的数据结构</p></li><li><p>stack提供迭代器来遍历stack空间吗?</p><p>栈提供<code>push</code>,<code>pop</code>等接口,所有元素必须符合先进后出规则, 所以栈不提供走访功能, 也不提供迭代器。</p></li><li><p>stack是如何实现的</p><p>如果没有指定底层实现的话，默认是以<code>deque</code>为缺省情况下栈的底层结构。</p><p><code>deque</code>是一个双向的队列, 只要封住一段，只开通另一端就可以实现栈的逻辑。</p></li></ul><p>我们也可以指定<code>vector</code>为栈的底层实现，初始化语句如下</p><pre><code class="hljs"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::stack&lt;<span class="hljs-type">int</span>, std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; third;<br></code></pre></td></tr></table></figure></code></pre><p>队列中先进先出的数据结构, 同样不允许有遍历行为, 不提供迭代器, SGI STL中队列一样是以deque为缺省情况下的底部结构。</p><p>也可以指定vector为栈的底层实现，初始化语句如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::stack&lt;<span class="hljs-type">int</span>, std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; third;<br></code></pre></td></tr></table></figure><p>队列中先进先出的数据结构, 同样不允许有遍历行为, 不提供迭代器，</p><h1 id="232-用栈实现队列"><a href="#232-用栈实现队列" class="headerlink" title="232_用栈实现队列"></a>232_用栈实现队列</h1><p><a href="https://leetcode.cn/problems/implement-queue-using-stacks/">题目链接</a></p><p>使用栈来模拟队列的行为，就需要两个栈，一个输入栈，一个输出栈。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyQueue</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    stack&lt;<span class="hljs-type">int</span>&gt; st_in;<br>    stack&lt;<span class="hljs-type">int</span>&gt; st_out;<br>    <span class="hljs-built_in">MyQueue</span>() &#123;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>        st_in.<span class="hljs-built_in">push</span>(x);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(st_out.<span class="hljs-built_in">empty</span>()) &#123;<br>            <span class="hljs-keyword">while</span> (!st_in.<span class="hljs-built_in">empty</span>()) &#123;<br>                st_out.<span class="hljs-built_in">push</span>(st_in.<span class="hljs-built_in">top</span>());<br>                st_in.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> ans;<br>        ans = st_out.<span class="hljs-built_in">top</span>();<br>        st_out.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">peek</span><span class="hljs-params">()</span> </span>&#123;             <span class="hljs-comment">//返回队列开头的元素</span><br>        <span class="hljs-type">int</span> ans;<br>        ans = <span class="hljs-keyword">this</span>-&gt;<span class="hljs-built_in">pop</span>();<br>        st_out.<span class="hljs-built_in">push</span>(ans);    <span class="hljs-comment">//pop含税弹出了元素ans, 所以再添加回去;</span><br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> st_in.<span class="hljs-built_in">empty</span>() &amp;&amp; st_out.<span class="hljs-built_in">empty</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>pushu数据的时候, 只要数据放进输入栈就好, pop时, 如果st_out为空, 就把st_in<strong>所有的数据都导入</strong>进来, 再从st_out弹出数据。</p><p>如果输出栈不为空, 则直接从栈弹出数据。</p><p><code>peed()</code>的实现复用了pop(),  </p><h1 id="225-用队列实现栈"><a href="#225-用队列实现栈" class="headerlink" title="225_用队列实现栈"></a>225_用队列实现栈</h1><p>两个队列来模拟栈，没有输入输出关系，另一个队列完全用来备份；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyStack</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    queue&lt;<span class="hljs-type">int</span>&gt; que1;<br>    queue&lt;<span class="hljs-type">int</span>&gt; que2;<br>    <span class="hljs-built_in">MyStack</span>() &#123;<br>    &#125;    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>        que1.<span class="hljs-built_in">push</span>(x);<br>    &#125;    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-type">int</span> size = que1.<span class="hljs-built_in">size</span>();<br>        size--;<br>        <span class="hljs-keyword">while</span> (size--) &#123;<br>            que2.<span class="hljs-built_in">push</span>(que1.<span class="hljs-built_in">front</span>());<br>            que1.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        <span class="hljs-type">int</span> ans = que1.<span class="hljs-built_in">front</span>();<br>        que1.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-built_in">swap</span>(que1,que2);<br>        <span class="hljs-keyword">while</span>(!que2.<span class="hljs-built_in">empty</span>()) &#123;<br>            que2.<span class="hljs-built_in">pop</span>(); <span class="hljs-comment">//清空que2；</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> que1.<span class="hljs-built_in">back</span>();<br>    &#125;    <br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> que1.<span class="hljs-built_in">empty</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>队列的操作有以下</p><ul><li><code>front</code>   返回第一个元素，所有的删除都在第一个元素上进行</li><li><code>back</code>    返回最后一个元素，所有的插入操作都在后面的元素上执行</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>队列和栈的操作还是要多熟悉熟悉;</p>]]></content>
    
    
    
    <tags>
      
      <tag>栈</tag>
      
      <tag>队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符串II</title>
    <link href="/2023/02/09/Day9_%E7%AC%AC%E5%9B%9B%E7%AB%A0_%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2023/02/09/Day9_%E7%AC%AC%E5%9B%9B%E7%AB%A0_%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符串I</title>
    <link href="/2023/02/08/Day8_%E7%AC%AC%E5%9B%9B%E7%AB%A0_%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2023/02/08/Day8_%E7%AC%AC%E5%9B%9B%E7%AB%A0_%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="day8-字符串"><a href="#day8-字符串" class="headerlink" title="day8_字符串"></a>day8_字符串</h1><ul><li><a href="https://leetcode.cn/problems/reverse-string/submissions/">344_反转字符串</a></li><li><a href="https://leetcode.cn/problems/reverse-string-ii/">541_反转字符串II</a></li><li><a href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof/">Offer05_替换空格</a></li><li><a href="https://leetcode.cn/problems/reverse-words-in-a-string/">151_反转字符串里的单词</a></li><li><a href="https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/">Offer58II_左旋转字符串</a></li></ul><h1 id="344-反转字符串"><a href="#344-反转字符串" class="headerlink" title="344_反转字符串"></a>344_反转字符串</h1><p><a href="https://programmercarl.com/0344.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.html">文章讲解</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reverseString</span><span class="hljs-params">(vector&lt;<span class="hljs-type">char</span>&gt;&amp; s)</span> </span>&#123;<br>        <span class="hljs-type">int</span> len = s.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = len<span class="hljs-number">-1</span>; i&lt;len/<span class="hljs-number">2</span>; i++, j--) &#123;<br>            <span class="hljs-built_in">swap</span>(s[i],s[j]);<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>这道题比较easy</p><h1 id="541-反转字符串II"><a href="#541-反转字符串II" class="headerlink" title="541_反转字符串II"></a>541_反转字符串II</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">reverseStr</span><span class="hljs-params">(string s, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;s.<span class="hljs-built_in">size</span>(); i = i+ <span class="hljs-number">2</span>*k) &#123;<br>            <span class="hljs-keyword">if</span>(i + k &lt;= s.<span class="hljs-built_in">size</span>()) &#123;<br>                <span class="hljs-built_in">reverse</span>(s.<span class="hljs-built_in">begin</span>()+i, s.<span class="hljs-built_in">begin</span>()+i+k);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">reverse</span>(s.<span class="hljs-built_in">begin</span>()+i, s.<span class="hljs-built_in">end</span>());<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>##不使用库函数，自己编写reverse函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reverse</span><span class="hljs-params">(string&amp;s, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> </span>&#123; <span class="hljs-comment">//左闭友闭区间</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = start, j = end; i &lt; j; i++, j--) &#123;<br>            <span class="hljs-built_in">swap</span>(s[i], s[j]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function">string <span class="hljs-title">reverseStr</span><span class="hljs-params">(string s, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;s.<span class="hljs-built_in">size</span>(); i = i + <span class="hljs-number">2</span> * k) &#123;<br>            <span class="hljs-keyword">if</span> (i + k &lt;=s.<span class="hljs-built_in">size</span>()) &#123;<br>                <span class="hljs-built_in">reverse</span>(s,i,i+k<span class="hljs-number">-1</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">reverse</span>(s, i, s.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="剑指Offer05-替换空格"><a href="#剑指Offer05-替换空格" class="headerlink" title="剑指Offer05_替换空格"></a>剑指Offer05_替换空格</h1><p><a href="https://programmercarl.com/%E5%89%91%E6%8C%87Offer05.%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC.html">文章详解</a><br>双指针法，从队尾开始移动，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">replaceSpace</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-type">int</span> origin_len = s.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> space_num = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i &lt; origin_len; i++) &#123;<br>            <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27; &#x27;</span>)<br>                space_num++;<br>        &#125;<br>        s.<span class="hljs-built_in">resize</span>(s.<span class="hljs-built_in">size</span>()+space_num);<br>        <span class="hljs-type">int</span> extern_len = s.<span class="hljs-built_in">size</span>()*;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = extern_len - <span class="hljs-number">1</span>, j = origin_len - <span class="hljs-number">1</span>; j&lt;i; j--, i--) &#123;<br>            <span class="hljs-keyword">if</span>(s[j] != <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>                s[i] = s[j];<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                s[i] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>                s[i<span class="hljs-number">-1</span>] = <span class="hljs-string">&#x27;2&#x27;</span>;<br>                s[i<span class="hljs-number">-2</span>] = <span class="hljs-string">&#x27;%&#x27;</span>;<br>                i = i - <span class="hljs-number">2</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>extern_len &#x3D; s.size() +space_num*2</li><li>要*2是因为 ‘ ‘ 转换为’20%’需要多2个位置</li><li>i从加上空格转换位置之后的末尾开始-1</li><li>j从原来的长度开始-1</li></ul><h1 id="反转字符串里的单词"><a href="#反转字符串里的单词" class="headerlink" title="反转字符串里的单词"></a>反转字符串里的单词</h1><p><a href="https://programmercarl.com/0151.%E7%BF%BB%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%87%8C%E7%9A%84%E5%8D%95%E8%AF%8D.html#%E5%85%B6%E4%BB%96%E8%AF%AD%E8%A8%80%E7%89%88%E6%9C%AC">文章讲解</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reverse</span><span class="hljs-params">(string &amp;s, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span></span>&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = start, j = end; i &lt; j; i++, j--) &#123;<br>                <span class="hljs-built_in">swap</span>(s[i], s[j]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">removeExtraSpaces</span><span class="hljs-params">(string &amp;s)</span> </span>&#123;<br>            <span class="hljs-type">int</span> slow = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> fast = <span class="hljs-number">0</span>; fast&lt;s.<span class="hljs-built_in">size</span>(); fast++) &#123; <span class="hljs-comment">//</span><br>                <span class="hljs-keyword">if</span>(s[fast] != <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>                    <span class="hljs-keyword">if</span>(slow != <span class="hljs-number">0</span>) &#123;<br>                        s[slow] = <span class="hljs-string">&#x27; &#x27;</span>;<br>                        slow = slow + <span class="hljs-number">1</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">while</span>(s[fast] != <span class="hljs-string">&#x27; &#x27;</span> &amp;&amp; fast &lt; s.<span class="hljs-built_in">size</span>()) &#123;<br>                        s[slow] = s[fast];<br>                        slow++;<br>                        fast++;<br>                    &#125;  <br>                &#125;<br>            &#125;<br>            s.<span class="hljs-built_in">resize</span>(slow);<br>        &#125;<br>        <span class="hljs-function">string <span class="hljs-title">reverseWords</span><span class="hljs-params">(string s)</span> </span>&#123;<br>            <span class="hljs-built_in">removeExtraSpaces</span>(s);<br>            <span class="hljs-built_in">reverse</span>(s, <span class="hljs-number">0</span>, s.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>);<br>            <span class="hljs-type">int</span> start = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= s.<span class="hljs-built_in">size</span>(); i++) &#123;<br>                <span class="hljs-keyword">if</span>(i == s.<span class="hljs-built_in">size</span>() || s[i]==<span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>                    <span class="hljs-built_in">reverse</span>(s, start, i<span class="hljs-number">-1</span>);<br>                    start = i + <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> s;<br>        &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="Offer58II-左旋转字符串"><a href="#Offer58II-左旋转字符串" class="headerlink" title="Offer58II_左旋转字符串"></a>Offer58II_左旋转字符串</h1><p><a href="https://programmercarl.com/%E5%89%91%E6%8C%87Offer58-II.%E5%B7%A6%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.html#%E5%85%B6%E4%BB%96%E8%AF%AD%E8%A8%80%E7%89%88%E6%9C%AC">文章讲解</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;head.h&quot;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">reverseLeftWords</span><span class="hljs-params">(string s, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-built_in">reverse</span>(s.<span class="hljs-built_in">begin</span>(), s.<span class="hljs-built_in">begin</span>()+n);<br>        <span class="hljs-built_in">reverse</span>(s.<span class="hljs-built_in">begin</span>()+n, s.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-built_in">reverse</span>(s.<span class="hljs-built_in">begin</span>(), s.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;   <br>&#125;;<br></code></pre></td></tr></table></figure><p>被这道题的解题思路惊艳到了</p>]]></content>
    
    
    
    <tags>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>哈希表I</title>
    <link href="/2023/02/07/Day7_%E7%AC%AC%E4%B8%89%E7%AB%A0_%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    <url>/2023/02/07/Day7_%E7%AC%AC%E4%B8%89%E7%AB%A0_%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><p>代码训练营day6，有以下题目<br><a href="https://leetcode.cn/problems/4sum-ii/submissions/">454_四数相加</a><br><a href="https://leetcode.cn/problems/ransom-note/">383_赎金信</a><br><a href="https://leetcode.cn/problems/3sum/">15_三数之和</a><br><a href=""></a></p><h1 id="454四数相加II"><a href="#454四数相加II" class="headerlink" title="454四数相加II"></a>454四数相加II</h1><p><a href="https://programmercarl.com/0454.%E5%9B%9B%E6%95%B0%E7%9B%B8%E5%8A%A0II.html#%E5%85%B6%E4%BB%96%E8%AF%AD%E8%A8%80%E7%89%88%E6%9C%AC">文章详解</a></p><p>先写下来，再试着理解代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fourSumCount</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums3, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums4)</span> </span>&#123;<br>        unordered_map &lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; map_ab;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> a: nums1) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> b: nums2)<br>                map_ab[a+b]++;<br>        &#125;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> c:nums3)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> d:nums4)&#123;<br>                <span class="hljs-type">int</span> tmp = <span class="hljs-number">0</span>-(c+d);<br>                <span class="hljs-keyword">if</span>(map_ab.<span class="hljs-built_in">find</span>(tmp) != map_ab.<span class="hljs-built_in">end</span>()) &#123;<br>                    ans = ans + map_ab[tmp];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>map[key]value;</li><li>a+b为key，value为key出现过的次数</li></ul><h1 id="383-赎金信"><a href="#383-赎金信" class="headerlink" title="383_赎金信"></a>383_赎金信</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">canConstruct</span><span class="hljs-params">(string ransomNote, string magazine)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(ransomNote.<span class="hljs-built_in">size</span>()&gt;magazine.<span class="hljs-built_in">size</span>()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">record</span><span class="hljs-params">(<span class="hljs-number">26</span>,<span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i:magazine) &#123;<br>            record[i-<span class="hljs-string">&#x27;a&#x27;</span>]++;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i:ransomNote) &#123;<br>            record[i-<span class="hljs-string">&#x27;a&#x27;</span>]--;<br>            <span class="hljs-keyword">if</span> (record[i - <span class="hljs-string">&#x27;a&#x27;</span>] &lt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>写起来还是比较轻松的</p><ul><li><code>s.size() == s.length();</code></li><li><code>if (record[i - &#39;a&#39;] &lt; 0)</code></li></ul><h2 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">canConstruct</span><span class="hljs-params">(string ransomNote, string magazine)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (ransomNote.<span class="hljs-built_in">size</span>() &gt; magazine.<span class="hljs-built_in">size</span>()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt;  <span class="hljs-title">record</span><span class="hljs-params">(<span class="hljs-number">26</span>,<span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; magazine.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            record[magazine[i]-<span class="hljs-string">&#x27;a&#x27;</span>]++;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; ransomNote.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            record[ransomNote[i]-<span class="hljs-string">&#x27;a&#x27;</span>]--;<br>            <span class="hljs-keyword">if</span>(record[ransomNote[i] - <span class="hljs-string">&#x27;a&#x27;</span>] &lt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>这种解法有问题，不可取，但是我懒得改了</p><h1 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15 三数之和"></a>15 三数之和</h1><p>这题很有意思，双指针解法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">threeSum</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ans;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-keyword">if</span>(nums[i] &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> ans;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i<span class="hljs-number">-1</span>]) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            left = left + <span class="hljs-number">1</span>;<br>            right = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(left &lt; right) &#123;<br>                <span class="hljs-keyword">if</span> (nums[i] + nums[left] + nums[right] &gt; <span class="hljs-number">0</span>) &#123;<br>                    right = right - <span class="hljs-number">1</span>;<br>                &#125; <br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[i] + nums[left] + nums[right] &lt; <span class="hljs-number">0</span>) &#123;<br>                    left = left + <span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    ans.<span class="hljs-built_in">push_back</span>(vector&lt;<span class="hljs-type">int</span>&gt;&#123;nums[i],nums[left],nums[right]&#125;);<br>                    <span class="hljs-keyword">while</span>(left &lt; right &amp;&amp; nums[left] == nums[left +<span class="hljs-number">1</span>]) &#123;<br>                        left = left + <span class="hljs-number">1</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">while</span>(left &lt; right &amp;&amp; nums[right] == nums[right - <span class="hljs-number">1</span>]) &#123;<br>                        right = right - <span class="hljs-number">1</span>;<br>                    &#125;<br>                    left = left + <span class="hljs-number">1</span>;<br>                    right = right - <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>注意循环初始时要对left 和right赋值;</li><li>查重在返回一个ans后再进行，因为0 + 0 + 0 &#x3D; 0；</li></ul><h1 id="四数之和"><a href="#四数之和" class="headerlink" title="四数之和"></a>四数之和</h1><p>迄今为止遇到的最复杂的一道题，挑战一下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">fourSum</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target) &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ans;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; nums.<span class="hljs-built_in">size</span>(); k++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[k] &gt;= <span class="hljs-number">0</span> &amp;&amp; nums[k] &gt; target) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (k &gt; <span class="hljs-number">0</span> &amp;&amp; nums[k] == nums[k - <span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = k + <span class="hljs-number">1</span>; i&lt;nums.<span class="hljs-built_in">size</span>(); i++) &#123;<br>                <br>                <span class="hljs-keyword">if</span> (nums[i] + nums[k]&gt;= <span class="hljs-number">0</span> &amp;&amp; nums[i] + nums[k] &gt; target) &#123; <br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(i &gt; k + <span class="hljs-number">1</span> &amp;&amp; nums[i] == nums[i<span class="hljs-number">-1</span>]) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-type">int</span> left = i + <span class="hljs-number">1</span>;<br>                <span class="hljs-type">int</span> right = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">while</span>(left &lt; right) &#123;<br>                    <span class="hljs-keyword">if</span> ((<span class="hljs-type">long</span>)nums[k] + nums[i] + nums[left] + nums[right] &lt; target) &#123;<br>                        left++;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((<span class="hljs-type">long</span>)nums[k] + nums[i] + nums[left] + nums[right] &gt; target) &#123;<br>                        right--;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> &#123;<br>                        ans.<span class="hljs-built_in">push_back</span>(vector&lt;<span class="hljs-type">int</span>&gt;&#123;nums[k],nums[i],nums[left],nums[right]&#125;);<br>                        <span class="hljs-keyword">while</span>(left &lt; right &amp;&amp; nums[right] == nums[right<span class="hljs-number">-1</span>]) &#123;<br>                            right--;<br>                        &#125;<br>                        <span class="hljs-keyword">while</span>(left &lt; right &amp;&amp; nums[left] == nums[left+<span class="hljs-number">1</span>]) &#123;<br>                            left++;<br>                        &#125;<br>                        left++;<br>                        right--;<br>                    &#125;        <br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>很复杂，多看几遍吧，满满的细节</p>]]></content>
    
    
    
    <tags>
      
      <tag>Hash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>哈希表II</title>
    <link href="/2023/02/06/Day6_%E7%AC%AC%E4%B8%89%E7%AB%A0_%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    <url>/2023/02/06/Day6_%E7%AC%AC%E4%B8%89%E7%AB%A0_%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><p>carl的训练营第六天，哈希表，包括题目</p><ul><li><a href="https://leetcode.cn/problems/valid-anagram/submissions/">242_有效的字母异位词</a></li><li><a href="https://leetcode.cn/problems/intersection-of-two-arrays/">349_两个数组的交集</a></li><li><a href="https://leetcode.cn/problems/happy-number/submissions/">202快乐数</a></li><li><a href="https://leetcode.cn/problems/two-sum/">1两数之和</a></li></ul><p>哈希表算我接触的最早的算法题了</p><p>遇到需要判断一个元素是否出现在集合里的时候，就考虑用哈希法</p><p><a href="https://programmercarl.com/%E5%93%88%E5%B8%8C%E8%A1%A8%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html">理论基础</a></p><h1 id="242-有效的字母异位词"><a href="#242-有效的字母异位词" class="headerlink" title="242_有效的字母异位词"></a>242_有效的字母异位词</h1><p><a href="https://programmercarl.com/0242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.html">文章讲解</a></p><p>本题算是我为数不多的可以闭着眼睛直接做出来的题目，直接上代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isAnagram</span><span class="hljs-params">(string s, string t)</span> </span>&#123;<br>        <span class="hljs-type">int</span> len_s = s.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-type">len_t</span> = t.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">record</span><span class="hljs-params">(<span class="hljs-number">26</span>,<span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-keyword">if</span> (len_s != <span class="hljs-type">len_t</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len_s; i++) &#123;<br>            record[s[i] - <span class="hljs-string">&#x27;a&#x27;</span>]++;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-type">len_t</span>; i++) &#123;<br>            record[t[s] - <span class="hljs-string">&#x27;a&#x27;</span>]--;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (record[i] != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349_两个数组的交集"></a>349_两个数组的交集</h1><p><a href="https://programmercarl.com/0349.%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86.html#_349-%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86">文章讲解</a></p><h2 id="unordered-set-解法"><a href="#unordered-set-解法" class="headerlink" title="unordered_set 解法"></a>unordered_set 解法</h2><p>没有限制数值的大小，无法使用数组来做哈希表，使用set</p><p>C++提供三种可用的数据结构</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::set<br>std::multiset<br>std::unoedered_set<br></code></pre></td></tr></table></figure><p><code>std::set</code> 和<code>std::multiset</code> 的底层实现是红黑树，<br><code>std::unordered_set</code> 底层实现是哈希表，使用<code>unordered_set</code> 读写效率最高，并不需要对数据进行排序，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">intersection</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2)</span> </span>&#123;<br>        unordered_set&lt;<span class="hljs-type">int</span>&gt; ans_set;<br>        <span class="hljs-function">unordered_set&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">nums1_set</span><span class="hljs-params">(nums1.begin(),nums.end())</span></span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;nums2.<span class="hljs-built_in">size</span>(), i++) &#123;<br>            <span class="hljs-keyword">if</span>(nums1_set.<span class="hljs-built_in">find</span>(nums2[i]) != nums1_set.<span class="hljs-built_in">end</span>())<br>            ans_set.<span class="hljs-built_in">insert</span>(nums2[i]);<br>        &#125;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ans</span><span class="hljs-params">(ans_set.begin(),ans_set.end())</span></span><br><span class="hljs-function">        <span class="hljs-keyword">return</span> ans </span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><code>nums1_set.find(nums2[i]) != nums1_set.end()</code> 在<code>nums1_set</code>中找到了和<code>nums2[i]</code>相同的元素且在<code>nums1_set</code>中</p><h2 id="数组解法"><a href="#数组解法" class="headerlink" title="数组解法"></a>数组解法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">intersection</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2)</span> </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">record</span><span class="hljs-params">(<span class="hljs-number">1001</span>)</span></span>;<br>        unordered_set&lt;<span class="hljs-type">int</span>&gt; ans;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i &lt; nums1.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            record[nums1[i]] = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i &lt; nums2.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-keyword">if</span>(record[nums2[i]]==<span class="hljs-number">1</span>) &#123;<br>                ans.<span class="hljs-built_in">insert</span>(nums2[i]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(ans.<span class="hljs-built_in">begin</span>(),ans.<span class="hljs-built_in">end</span>());<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="202-快乐数"><a href="#202-快乐数" class="headerlink" title="202_快乐数"></a>202_快乐数</h1><p><a href="https://programmercarl.com/0202.%E5%BF%AB%E4%B9%90%E6%95%B0.html">文章讲解</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getsum</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(n) &#123;<br>            sum = sum + (n % <span class="hljs-number">10</span>)*(n % <span class="hljs-number">10</span>);<br>            n = n / <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isHappy</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        unordered_set&lt;<span class="hljs-type">int</span>&gt; sum_set;<br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;<br>            sum = <span class="hljs-built_in">getsum</span>(n);<br>            <span class="hljs-keyword">if</span>(sum == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125; <br>            <span class="hljs-keyword">if</span>(sum_set.<span class="hljs-built_in">find</span>(sum) != set_sum.<span class="hljs-built_in">end</span>()) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                sumset.<span class="hljs-built_in">insert</span>(sum);<br>            &#125;<br>            n = sum;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>如果sum重复出现，就return false;<br>否则一直找到sum&#x3D;&#x3D;1为止;<br>判断sum是否重复出现就用unordered_set;</p><h1 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1_两数之和"></a>1_两数之和</h1><p><a href="https://programmercarl.com/0001.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html#_1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C">文章讲解</a></p><h2 id="经典的暴力解法"><a href="#经典的暴力解法" class="headerlink" title="经典的暴力解法"></a>经典的暴力解法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; ans;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i++) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i+<span class="hljs-number">1</span>; j&lt;nums.<span class="hljs-built_in">size</span>();j++) &#123;<br>                <span class="hljs-keyword">if</span> (nums[i]+nums[j]==target) &#123;<br>                    ans.<span class="hljs-built_in">push_back</span>(i);<br>                    ans.<span class="hljs-built_in">push_back</span>(j);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>那叫写地一个得心应手</p><h2 id="哈希法"><a href="#哈希法" class="headerlink" title="哈希法"></a>哈希法</h2><p>需要存放两个元素，数值和下表，用map；<br>数值作为key；快速查找key，数值是否出现过，<br>下标作为value;<br>C++中有三种map</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">std::map<br>std::unordered_map<br>std::multi_map<br></code></pre></td></tr></table></figure><p><code>map</code>和<code>multi_map</code> 底层实现是红黑树; key有序<br><code>unordered_map</code>底层实现是哈希结构,key无序，直接做映射。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; twoSum_map;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;nums.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            vector&lt;<span class="hljs-type">int</span>&gt; ans;<br>            <span class="hljs-type">int</span> s = target - nums[i];<br>            <span class="hljs-keyword">auto</span> iter = twoSum_map.<span class="hljs-built_in">find</span>(s);<br>            <span class="hljs-keyword">if</span>(iter != twoSum_map.<span class="hljs-built_in">end</span>()) &#123;<br>                ans.<span class="hljs-built_in">push_back</span>(i);<br>                ans.<span class="hljs-built_in">push_back</span>(iter-&gt;second);<br>                <span class="hljs-keyword">return</span> ans;<br>            &#125;<br>            twoSum_map.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;(nums[i],i));<br>        &#125;<br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ol><li>map-&gt;fitst &#x3D; key;</li><li>map-&gt;second &#x3D; value;</li><li>要将遍历过的key value值放入map中以进行后面的查询；</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Hash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>day5休息一天 总结</title>
    <link href="/2023/02/06/Day5_%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/"/>
    <url>/2023/02/06/Day5_%E7%AC%AC%E4%B8%80%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>链表II</title>
    <link href="/2023/02/04/Day4_%E7%AC%AC%E4%BA%8C%E7%AB%A0_%E9%93%BE%E8%A1%A8/"/>
    <url>/2023/02/04/Day4_%E7%AC%AC%E4%BA%8C%E7%AB%A0_%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24 两两交换链表中的节点"></a>24 两两交换链表中的节点</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">swapPairs</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        ListNode* dummyHead = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">//虚拟头节点</span><br>        dummyHead-&gt;next = head;<br>        ListNode* cur;<br>        cur = dummyHead;<br>        ListNode* temp_1;<br>        ListNode* temp_3;<br>        <span class="hljs-keyword">while</span>(cur-&gt;next != <span class="hljs-literal">nullptr</span> &amp;&amp; cur-&gt;next-&gt;next != <span class="hljs-literal">nullptr</span>) &#123;<br>            temp_1 = cur-&gt;next;<br>            temp_3 = cur-&gt;next-&gt;next-&gt;next;<br>            cur-&gt;next = cur-&gt;next-&gt;next;  <span class="hljs-comment">//步骤一</span><br>            cur-&gt;next-&gt;next=temp_1;<br>            cur-&gt;next-&gt;next-&gt;next = temp_1;<br>            cur = cur-&gt;next-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummyHead-&gt;next;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="删除链表的倒数第N个节点"><a href="#删除链表的倒数第N个节点" class="headerlink" title="删除链表的倒数第N个节点"></a>删除链表的倒数第N个节点</h1><p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/submissions/">题目链接</a></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xl"><br>class Solution &#123;<br>public:<br>ListNode* removeNthFromEnd(ListNode* head, int n) &#123;<br>ListNode* dummyHead = new ListNode(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-title">dummyHead</span>-&gt;</span>next = head;<br>ListNode* fast = dummyHead;<br>ListNode* slow = dummyHead;<br>        n=n+<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(n-- &amp;&amp; fast != NULL) &#123;<br><span class="hljs-function"><span class="hljs-title">fast</span> = fast-&gt;</span>next;<br>&#125;<br><span class="hljs-comment">//fast = fast-&gt;next;</span><br><span class="hljs-keyword">while</span>(fast!=NULL) &#123;<br><span class="hljs-function"><span class="hljs-title">fast</span> = fast-&gt;</span>next;<br><span class="hljs-function"><span class="hljs-title">slow</span> = slow-&gt;</span>next;<br>&#125;<br><span class="hljs-function"><span class="hljs-title">slow</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span> = slow-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span>-&gt;</span>next;<br>        <span class="hljs-function"><span class="hljs-title">return</span> dummyHead-&gt;</span>next;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ol><li>快指针移动n+1部</li><li>然后快慢指针一起移动</li><li>慢指针移动至需要删除的节点的前一个</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表I</title>
    <link href="/2023/02/03/Day3_%E7%AC%AC%E4%BA%8C%E7%AB%A0_%E9%93%BE%E8%A1%A8/"/>
    <url>/2023/02/03/Day3_%E7%AC%AC%E4%BA%8C%E7%AB%A0_%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>第一次接触链表，写的很挣扎</p><h1 id="Leetcode203-移除链表元素"><a href="#Leetcode203-移除链表元素" class="headerlink" title="Leetcode203.移除链表元素"></a>Leetcode203.移除链表元素</h1><p><a href="https://leetcode.cn/problems/remove-linked-list-elements/">题目地址</a></p><p>这是题目中定义的链表</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">struct</span> ListNode &#123;<span class="hljs-operator"></span><br><span class="hljs-operator"> *     </span><span class="hljs-built_in">int</span> <span class="hljs-keyword">val</span>;<span class="hljs-operator"></span><br><span class="hljs-operator"> *     </span>ListNode *next;<span class="hljs-operator"></span><br><span class="hljs-operator"> *     </span><span class="hljs-constructor">ListNode()</span> : <span class="hljs-keyword">val</span>(<span class="hljs-number">0</span>), next(nullptr) &#123;&#125;<span class="hljs-operator"></span><br><span class="hljs-operator"> *     </span><span class="hljs-constructor">ListNode(<span class="hljs-params">int</span> <span class="hljs-params">x</span>)</span> : <span class="hljs-keyword">val</span>(x), next(nullptr) &#123;&#125;<span class="hljs-operator"></span><br><span class="hljs-operator"> *     </span><span class="hljs-constructor">ListNode(<span class="hljs-params">int</span> <span class="hljs-params">x</span>, ListNode <span class="hljs-operator">*</span><span class="hljs-params">next</span>)</span> : <span class="hljs-keyword">val</span>(x), next(next) &#123;&#125;<span class="hljs-operator"></span><br><span class="hljs-operator"> * </span>&#125;;<br></code></pre></td></tr></table></figure><h2 id="在原来的链表中删除元素"><a href="#在原来的链表中删除元素" class="headerlink" title="在原来的链表中删除元素"></a>在原来的链表中删除元素</h2><p>判断链表第一位是否为target</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">class</span> Solution&#123;<br><span class="hljs-keyword">public</span>:<br>    ListNode* removeElements(ListNode* head, <span class="hljs-keyword">int</span> target) &#123;<br>        <span class="hljs-keyword">while</span>(head! = <span class="hljs-keyword">NULL</span> &amp;&amp; head-&gt;val == target) &#123; <span class="hljs-comment">//删除头节点</span><br>            ListNode tmp = head;<br>            head = head-&gt;<span class="hljs-keyword">next</span>;<br>            <span class="hljs-keyword">delete</span> tmp;<br>        &#125;<br>        <span class="hljs-comment">//处理后面的节点</span><br>        ListNode* cur = head;<br>        <span class="hljs-keyword">while</span>(cur-&gt;<span class="hljs-keyword">next</span>!=<span class="hljs-keyword">NULL</span> &amp;&amp; cur!=<span class="hljs-keyword">NULL</span>) &#123;<br>            <span class="hljs-keyword">if</span>(cur-&gt;<span class="hljs-keyword">next</span>==target) &#123;<br>                ListNode* tmp = cur-&gt;<span class="hljs-keyword">next</span>;<br>                cur-&gt;<span class="hljs-keyword">next</span>=cur-&gt;<span class="hljs-keyword">next</span>-&gt;<span class="hljs-keyword">next</span>;<br>                <span class="hljs-keyword">delete</span> tmp;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                cur = cur-&gt;<span class="hljs-keyword">next</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;<br>多写几次，慢慢有手感了<br></code></pre></td></tr></table></figure><p>class Solution{<br>public:<br>    ListNode* removeElement(ListNode* head, int target) {<br>        ListNode dummyNode &#x3D; new ListNode(0);<br>        dummyNode-&gt;next &#x3D; head;<br>        ListNode* cur &#x3D; dummyNode;<br>        while(cur-&gt;next!&#x3D;NULL) {<br>            if(cur-&gt;next-&gt;val &#x3D;&#x3D; target) {<br>                ListNode tmp &#x3D; cur-&gt;next;<br>                cur-&gt;next &#x3D; cur-&gt;next-&gt;next;<br>                delete tmp;<br>            } else {<br>                cur &#x3D; cur -&gt;next;<br>            }<br>        }<br>        head &#x3D; dummyHead-&gt;next;<br>        delete dummyHead;<br>        return head;<br>    }<br>};</p><ol><li>多写吧，会好起来的</li></ol><h1 id="707-设计链表"><a href="#707-设计链表" class="headerlink" title="707 设计链表"></a>707 设计链表</h1><p><a href="https://leetcode.cn/problems/design-linked-list/comments/">题目地址</a></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">class</span> MyLinkedList &#123;<br>public:<br><br>    <span class="hljs-keyword">struct</span> LinkedNode &#123;<br>        <span class="hljs-built_in">int</span> <span class="hljs-keyword">val</span>;<br>        LinkedNode* next;<br>        <span class="hljs-constructor">LinkedNode(<span class="hljs-params">int</span> <span class="hljs-params">x</span>)</span>:<span class="hljs-keyword">val</span>(x), next(nullptr)&#123;&#125;<br>    &#125;;<br>    <span class="hljs-constructor">MyLinkedList()</span> &#123;<br>        _dummyNode = <span class="hljs-keyword">new</span> <span class="hljs-constructor">LinkedNode(0)</span>;<br>        _size = <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-built_in">int</span> get(<span class="hljs-built_in">int</span> index) &#123; <span class="hljs-comment">//获取链表中第 index 个节点的值。如果索引无效，则返回-1。</span><br>        <span class="hljs-keyword">if</span>(index &gt; (_size-<span class="hljs-number">1</span>)<span class="hljs-operator"> || </span>index &lt; <span class="hljs-number">0</span>) &#123;<br>            return -<span class="hljs-number">1</span>;<br>        &#125;<br><br>        LinkedNode* cur = _dummyNode-&gt;next;<br>        <span class="hljs-keyword">while</span>(index--) &#123;<br>            cur = cur-&gt;next;<br>        &#125;<br>        return cur-&gt;<span class="hljs-keyword">val</span>;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        在链表的第一个元素之前添加一个值为 val 的节点。</span><br><span class="hljs-comment">        插入后，新节点将成为链表的第一个节点。</span><br><span class="hljs-comment">    */</span><br>    void add<span class="hljs-constructor">AtHead(<span class="hljs-params">int</span> <span class="hljs-params">val</span>)</span> &#123; <br>        LinkedNode* newNode = <span class="hljs-keyword">new</span> <span class="hljs-constructor">LinkedNode(<span class="hljs-params">val</span>)</span>;<br>        newNode-&gt;next = _dummyNode-&gt;next;<br>        _dummyNode-&gt;next = newNode;<br>        _size++;<br>    &#125;<br>    <span class="hljs-comment">//将值为 val 的节点追加到链表的最后一个元素。</span><br>    void add<span class="hljs-constructor">AtTail(<span class="hljs-params">int</span> <span class="hljs-params">val</span>)</span> &#123;  <br>        LinkedNode* tailNode = <span class="hljs-keyword">new</span> <span class="hljs-constructor">LinkedNode(<span class="hljs-params">val</span>)</span>;<br>        LinkedNode* cur = _dummyNode;<br>        <span class="hljs-keyword">while</span>(cur-&gt;next != nullptr) &#123;<br>            cur = cur-&gt;next;<br>        &#125;<br>        cur-&gt;next = tailNode;<br>        _size++;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        在链表中的第 index 个节点之前添加值为 val  的节点。</span><br><span class="hljs-comment">        如果 index 等于链表的长度，则该节点将附加到链表的末尾。</span><br><span class="hljs-comment">        如果 index 大于链表长度，则不会插入节点。</span><br><span class="hljs-comment">        如果index小于0，则在头部插入节点。</span><br><span class="hljs-comment">    */</span><br>    void add<span class="hljs-constructor">AtIndex(<span class="hljs-params">int</span> <span class="hljs-params">index</span>, <span class="hljs-params">int</span> <span class="hljs-params">val</span>)</span> &#123; <br>    <br>        <span class="hljs-keyword">if</span>(index&gt;_size) &#123;<br>            return;<br>        &#125;<br>            <br>        <span class="hljs-keyword">if</span>(index&lt;<span class="hljs-number">0</span>) &#123;<br>            index = <span class="hljs-number">0</span>;<br>        &#125;<br>        LinkedNode* indexNode = <span class="hljs-keyword">new</span> <span class="hljs-constructor">LinkedNode(<span class="hljs-params">val</span>)</span>;<br>        LinkedNode* cur = _dummyNode;<br>        <span class="hljs-keyword">while</span>(index) &#123;<br>            cur=cur-&gt;next;<br>            index--;<br>        &#125;<br>        indexNode-&gt;next = cur-&gt;next;<br>        cur-&gt;next = indexNode;<br>        _size++;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        如果索引 index 有效，则删除链表中的第 index 个节点。</span><br><span class="hljs-comment">    */</span><br>    void delete<span class="hljs-constructor">AtIndex(<span class="hljs-params">int</span> <span class="hljs-params">index</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span>(index &gt;= _size<span class="hljs-pattern-match"><span class="hljs-operator">||</span> index &lt;0) &#123;</span><br><span class="hljs-pattern-match">            return;</span><br><span class="hljs-pattern-match">        &#125;</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">LinkedNode</span><span class="hljs-operator">*</span> cur = <span class="hljs-constructor">_dummyNode</span>;</span><br><span class="hljs-pattern-match">        <span class="hljs-keyword">while</span>(index) &#123;</span><br><span class="hljs-pattern-match">            cur = cur -&gt;next;</span><br><span class="hljs-pattern-match">            index--;</span><br><span class="hljs-pattern-match">        &#125;</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">LinkedNode</span><span class="hljs-operator">*</span> temp = cur-&gt;next;</span><br><span class="hljs-pattern-match">        cur-&gt;next = cur-&gt;next-&gt;next;</span><br><span class="hljs-pattern-match">        delete temp;</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">_size</span>--;</span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match">    void print<span class="hljs-constructor">LinkedList()</span>&#123;</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">LinkedNode</span><span class="hljs-operator">*</span> cur = <span class="hljs-constructor">_dummyNode</span>;</span><br><span class="hljs-pattern-match">        <span class="hljs-keyword">while</span>(cur-&gt;next != nullptr) &#123;</span><br><span class="hljs-pattern-match">            cout&lt;&lt; cur-&gt;next-&gt;<span class="hljs-keyword">val</span>&lt;&lt;&quot; &quot;;</span><br><span class="hljs-pattern-match">            cur = cur-&gt;next;</span><br><span class="hljs-pattern-match">        &#125; </span><br><span class="hljs-pattern-match">        cout&lt;&lt;endl;</span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match"><span class="hljs-keyword">private</span>:</span><br><span class="hljs-pattern-match">    <span class="hljs-built_in">int</span> <span class="hljs-constructor">_size</span>;</span><br><span class="hljs-pattern-match">    <span class="hljs-constructor">LinkedNode</span><span class="hljs-operator">*</span> <span class="hljs-constructor">_dummyNode</span>;</span><br><span class="hljs-pattern-match">&#125;;</span><br></code></pre></td></tr></table></figure><ol><li>验证中去极值判断是否合理</li><li>一定要使用虚拟头节点</li></ol><h1 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h1><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    ListNode* reverseList(ListNode* head) &#123;<br>        ListNode* cur;<br>        cur = head;<br>        ListNode* pre<br>        pre = NULL;<br>        ListNode* temp<br>        <span class="hljs-keyword">while</span> (cur) &#123;<br>            tmep = cur-&gt;<span class="hljs-keyword">next</span>;<br>            cur-&gt;<span class="hljs-keyword">next</span> = pre;<br>            pre = cur;<br>            cur = temp;<br>        &#125;<br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h2 id="递归解法"><a href="#递归解法" class="headerlink" title="递归解法"></a>递归解法</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">class</span> Solution &#123;<br><span class="hljs-keyword">public</span>:<br>   ListNode* <span class="hljs-keyword">reverse</span>(ListNode* pre, ListNode* cur) &#123;<span class="hljs-comment">//专门翻转链表</span><br>        <span class="hljs-keyword">if</span> (cur==<span class="hljs-keyword">NULL</span>) &#123;<br>            <span class="hljs-keyword">return</span> pre;<br>        &#125;<br>        ListNode* temp = cur-&gt;<span class="hljs-keyword">next</span>;<br>        cur-&gt;<span class="hljs-keyword">next</span> = pre;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">reverse</span>(cur, temp);<br>    &#125;<br>    ListNode* reverseList(ListNode* head) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">reverse</span>(<span class="hljs-keyword">NULL</span>,head);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>-链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组II</title>
    <link href="/2023/02/02/Day2_%E7%AC%AC%E4%B8%80%E7%AB%A0_%E6%95%B0%E7%BB%84/"/>
    <url>/2023/02/02/Day2_%E7%AC%AC%E4%B8%80%E7%AB%A0_%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<p>977 有序数组的平方</p><p>209 长度最小的子数组<br>59 螺旋矩阵</p><h1 id="997-有序数组的平方"><a href="#997-有序数组的平方" class="headerlink" title="997 有序数组的平方"></a>997 有序数组的平方</h1><h2 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">solution</span> &#123;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sortedSquares</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;nums.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            nums[i] = nums[i] * nums[i];<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">return</span> nums;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>每个数平方后排序，时间复杂度O(n+logn)</p><h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><p>i指向起始位置<br>j指向末尾位置<br>从大到小给ans[len]赋值</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sortedSquares</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> len = nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ans</span><span class="hljs-params">(num.size(),<span class="hljs-number">0</span>)</span></span><br><span class="hljs-function">        <span class="hljs-title">for</span><span class="hljs-params">(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = len; i&lt;=j;)</span> </span>&#123;<br>            <span class="hljs-keyword">if</span>(nums[i]*nums[i] &lt; nums[j]*nums[j]) &#123;<br>                ans[len] = nums[j]*nums[j];<br>                len--; <br>                j--;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                ans[len] = nums[i] * nums[i];<br>                len--;<br>                i++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><ol><li>vector<int> ans(num.size(),0);</li></ol><h1 id="209有序数组的平方"><a href="#209有序数组的平方" class="headerlink" title="209有序数组的平方"></a>209有序数组的平方</h1><p>暴力解法不能通过leetcode的测试<br>滑动窗口:</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs excel">class Solution &#123;<br>publ<span class="hljs-symbol">ic:</span><br>    <span class="hljs-built_in">int</span> minSubArrayLen(<span class="hljs-built_in">int</span> target, vector&lt;<span class="hljs-built_in">int</span>&gt;&amp; nums) &#123;<br>        <span class="hljs-built_in">int</span> <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">int</span> ans = INT_MAX;<br>        <span class="hljs-built_in">int</span> sublen=<span class="hljs-number">0</span>;<br>        for(<span class="hljs-built_in">int</span> <span class="hljs-built_in">left</span> = <span class="hljs-number">0</span>, <span class="hljs-built_in">right</span> = <span class="hljs-number">0</span>;<span class="hljs-built_in">right</span> &lt; nums.size(); <span class="hljs-built_in">right</span>++) &#123;<br>            <span class="hljs-built_in">sum</span> = <span class="hljs-built_in">sum</span> + nums[<span class="hljs-built_in">right</span>];<br>            while (<span class="hljs-built_in">sum</span> &gt;= target) &#123;<br>                sublen = <span class="hljs-built_in">right</span> - <span class="hljs-built_in">left</span> + <span class="hljs-number">1</span>;<br>                ans = ans &lt; sublen ? ans <span class="hljs-symbol">:</span> sublen;<br>                <span class="hljs-built_in">sum</span> = <span class="hljs-built_in">sum</span> - nums[<span class="hljs-built_in">left</span>++];<br>                //<span class="hljs-built_in">left</span> = <span class="hljs-built_in">left</span> +<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        return ans == INT_MAX? <span class="hljs-symbol">0:an</span>s;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="要点-1"><a href="#要点-1" class="headerlink" title="要点"></a>要点</h3><ol><li>sum的初始化要在for循环之外</li><li>最后要判断所有的值相加是否依然小于target</li></ol><h1 id="59-螺旋矩阵"><a href="#59-螺旋矩阵" class="headerlink" title="59 螺旋矩阵"></a>59 螺旋矩阵</h1><p>始终是左闭右开区间；</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs excel">class Solution &#123;<br>publ<span class="hljs-symbol">ic:</span><br>    vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt;&gt; generateMatrix(<span class="hljs-built_in">int</span> <span class="hljs-built_in">n</span>) &#123;<br>        vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt;&gt; ans[<span class="hljs-built_in">n</span>,vector&lt;<span class="hljs-built_in">int</span>&gt;(<span class="hljs-built_in">n</span>)];<br>        <span class="hljs-built_in">int</span> start_x=<span class="hljs-number">0</span>, start_y=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>, <span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">int</span> loop = <span class="hljs-built_in">n</span>/<span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">int</span> <span class="hljs-built_in">offset</span> = <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">int</span> <span class="hljs-built_in">count</span> = <span class="hljs-number">1</span>;<br>        while(loop) &#123;<br>            for (j = start_y; j &lt; <span class="hljs-built_in">len</span> - <span class="hljs-built_in">offset</span> -<span class="hljs-number">1</span>; j++) &#123;<br>                ans[start_x][j] = <span class="hljs-built_in">count</span>;<br>                <span class="hljs-built_in">count</span> = <span class="hljs-built_in">count</span> + <span class="hljs-number">1</span>;<br>            &#125;<br>            for (i = start_x; i &lt; <span class="hljs-built_in">len</span> - <span class="hljs-built_in">offset</span> - <span class="hljs-number">1</span>; i++) &#123;<br>                ans[i][j] = <span class="hljs-built_in">count</span>;<br>                <span class="hljs-built_in">count</span> = <span class="hljs-built_in">count</span> + <span class="hljs-number">1</span>;<br>            &#125;<br>            for (; j &gt; start_x; j--) &#123;<br>                ans[i]ans[j] = <span class="hljs-built_in">count</span>;<br>                <span class="hljs-built_in">count</span> = <span class="hljs-built_in">count</span> + <span class="hljs-number">1</span>;<br>            &#125;<br>            for (; i &gt; start_y; i--) &#123;<br>                ans[i][j] = <span class="hljs-built_in">count</span>;<br>                <span class="hljs-built_in">count</span> = <span class="hljs-built_in">count</span> + <span class="hljs-number">1</span>;<br>            &#125;<br>            start_x = start_x + <span class="hljs-number">1</span>;<br>            start_y = start_y + <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">offset</span> = <span class="hljs-built_in">offset</span> + <span class="hljs-number">1</span>;<br>            loop = loop -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-built_in">if</span>(<span class="hljs-built_in">n</span> % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>            ans[<span class="hljs-built_in">n</span>/<span class="hljs-number">2</span>][<span class="hljs-built_in">n</span>/<span class="hljs-number">2</span>] = <span class="hljs-built_in">n</span>*<span class="hljs-built_in">n</span>;<br>        &#125;<br>        return ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>累了写不动了</p>]]></content>
    
    
    
    <tags>
      
      <tag>数组</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组I</title>
    <link href="/2023/02/01/Day1_%E7%AC%AC%E4%B8%80%E7%AB%A0_%E6%95%B0%E7%BB%84/"/>
    <url>/2023/02/01/Day1_%E7%AC%AC%E4%B8%80%E7%AB%A0_%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="数组I"><a href="#数组I" class="headerlink" title="数组I"></a>数组I</h1><p>Carl的代码训练营第一天，二分查找和移除元素</p><ul><li><a href="https://leetcode.cn/problems/binary-search/">704_二分查找</a> </li><li><a href="https://leetcode.cn/problems/remove-element/">27_移除元素</a></li></ul><hr><h1 id="704-二分法查找算法"><a href="#704-二分法查找算法" class="headerlink" title="704_二分法查找算法"></a>704_二分法查找算法</h1><p>共两种写法，左闭友闭+左闭右开。</p><ul><li><a href="https://programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html">文章讲解</a></li><li><a href="https://www.bilibili.com/video/BV1fA4y1o715">视频讲解</a></li></ul><h2 id="写法一，左闭友闭"><a href="#写法一，左闭友闭" class="headerlink" title="写法一，左闭友闭"></a>写法一，左闭友闭</h2><p>左闭友闭写法, left&lt;&#x3D;right,</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;                                   <span class="hljs-comment">//1</span><br>        <span class="hljs-type">int</span> right = num.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;                     <span class="hljs-comment">//2</span><br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>            <span class="hljs-type">int</span> middle = left + ((right - left) / <span class="hljs-number">2</span>)    <span class="hljs-comment">// 3</span><br>            <span class="hljs-keyword">if</span> (nums[middle] &lt; target) &#123;<br>                left = middle + <span class="hljs-number">1</span>;                      <span class="hljs-comment">//4</span><br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[middle] &gt; target) &#123;<br>                right = middle - <span class="hljs-number">1</span>;                     <span class="hljs-comment">//5</span><br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[middle] == target) &#123;<br>                <span class="hljs-keyword">return</span> middle;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;; <br><br></code></pre></td></tr></table></figure><ol><li>left 初始化为0</li><li>闭区间，right &#x3D; nums.size() - 1;</li><li>$$<br>  \frac{left+right}{2} &#x3D;&#x3D; left + \frac{right-left}{2}<br>$$</li><li>左闭 left &#x3D; middle + 1</li><li>右闭 right &#x3D; right - 1</li></ol><h2 id="写法二，左闭右开"><a href="#写法二，左闭右开" class="headerlink" title="写法二，左闭右开"></a>写法二，左闭右开</h2><p>左闭右开，left&lt;right</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> right = nums.right                      <span class="hljs-comment">//1</span><br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>            <span class="hljs-type">int</span> middle = left + (right - left) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (nums[middle]&gt;target) &#123;<br>                right = middle;                     <span class="hljs-comment">//2</span><br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[middle] &lt; target) &#123;<br>                left = middle +<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> middle;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ol><li>开区间，[a,b), right &#x3D; nums.size();</li><li>开区间，right &#x3D; middle;</li></ol><h1 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27_移除元素"></a>27_移除元素</h1><p><a href="https://programmercarl.com/0027.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.html">文章讲解</a></p><h2 id="暴力实现"><a href="#暴力实现" class="headerlink" title="暴力实现"></a>暴力实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">removeElement</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> val)</span> </span>&#123;<br>        <span class="hljs-type">int</span> len = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] == val) &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>; j&lt;len; j++) &#123;<br>                    nums[i] = nums[j];<br>                &#125;<br>                len--;<br>                i--;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> len;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>没什么好说的，记住就行</p><h2 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">removeElement</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> val)</span> </span>&#123;<br>        <span class="hljs-type">int</span> len = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> slow = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> fast = <span class="hljs-number">0</span>; fast &lt; len; fast++) &#123;<br>            <span class="hljs-keyword">if</span>(nums[fast] != val) &#123;<br>                nums[slow] = nums[fast];<br>                slow++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> slow;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>一定记得要初始化slow和fast！！！</p>]]></content>
    
    
    
    <tags>
      
      <tag>二分法</tag>
      
      <tag>数组</tag>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023.2.1, 关于过去四年的生活总结</title>
    <link href="/2023/01/31/%E5%85%B3%E4%BA%8E%E8%BF%87%E5%8E%BB%E5%9B%9B%E5%B9%B4%E7%9A%84%E7%94%9F%E6%B4%BB%E6%80%BB%E7%BB%93/"/>
    <url>/2023/01/31/%E5%85%B3%E4%BA%8E%E8%BF%87%E5%8E%BB%E5%9B%9B%E5%B9%B4%E7%9A%84%E7%94%9F%E6%B4%BB%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>待笔</p><p>招飞这件事，从18年折腾到现在，个中辛酸，不知与和人说，终于，算是在2023.2.1这天，走到了终点，从此人生就要换一条路走了。</p><p>我想，要在即将遗忘那些往事时，写点什么记录发生过的一切，就当是赛博回忆录了</p><p>我是18年11月参加了第一次厦航的招飞宣讲，以及第一场面试，毫无意外的通过了，面试我的人是招飞办的李晨，当时正处于秋招，在宣讲会现场，排队到我要量身高体重的时候，IBM打来电话，给我发了offer，我也没拒绝，可事情往往是一环扣着一环，这事暂且按下不表。</p><p>12月去第一次去北京参加上站体检，我想，如果当时那个医生不要给我那个机会，可能会减少很多后来的痛苦。眼科以为大夫在我眼底发现了绿豆大小的一块暗影，属于可过可不过的范畴，医生考虑我是大毕改，就算后面的交叉检不过，对工作也没什么影响，就好心给了我一次机会。</p><p>在此我怀着十分复杂的心情感谢那位北京医生，后面我又遇到很多人，在这种“生死边缘”拉了我一把，可惜最终于事无补，说到底还是我不争气。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>前端学习札记_1</title>
    <link href="/2018/06/23/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0/"/>
    <url>/2018/06/23/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="React-父子组件传值、input，onChange-中的问题"><a href="#React-父子组件传值、input，onChange-中的问题" class="headerlink" title="React 父子组件传值、input，onChange 中的问题"></a>React 父子组件传值、input，onChange 中的问题</h1><h3 id="1-先看最简单React-父子组件传值"><a href="#1-先看最简单React-父子组件传值" class="headerlink" title="1.先看最简单React 父子组件传值"></a>1.先看最简单React 父子组件传值</h3><pre><code class="hljs">import React, &#123; Component &#125; from &#39;react&#39;class ChildCom extends Component&#123;    constructor(props)&#123;        super(props);        this.state=&#123;            state_1:&#39;name&#39;,            state_2:&#39;gender&#39;,            state_3:&#39;age&#39;,        &#125;    &#125;render()&#123;    return(    &lt;div&gt;        &#123;this.props.Student&#125;        &lt;br/&gt;        &lt;input  value=&#123;this.state.state_1&#125; /&gt;        &lt;br/&gt;        &lt;input  value=&#123;this.state.state_2&#125; /&gt;        &lt;br/&gt;        &lt;input  value=&#123;this.state.state_3&#125; /&gt;        &lt;br/&gt;    &lt;/div&gt;        )    &#125;    &#125;class ParentCom extends Component&#123;    constructor(props)&#123;        super(props);        this.state=&#123;            info_1:&#39;Head&#39;,        &#125;    &#125;    render()&#123;        return(            &lt;div&gt;                &lt;ChildCom Student=&#123;this.state.info_1&#125; /&gt;                &lt;button onClick=&#123;this.handleSubmit&#125;&gt;submit&lt;/button&gt;            &lt;/div&gt;        )    &#125;&#125;export default ParentCom</code></pre><p>上面是最简单的 React 父组件向子组件传值， 我们来看一下效果</p><p>子组件<code>ChildCom</code> 在父组件 <code>ParentCom</code> 中渲染， <code>ParentCom</code> 中定义 state <code>info_1=‘HEAD&#39;</code> 在渲染 子组件 <code>ChildCom</code> 时：</p><pre><code class="hljs">&lt;ChildCom Student=&#123;this.state.info_1&#125; /&gt;</code></pre><p><code>Student=&#123;this.state.info_1&#125;</code>就是给子组件 添加一个名为<code>Student</code>的 Props 属性，这个属性又指向了父组件<code>ParentCom</code> 的 state <code>info_1=HEAD</code> ，意味着现在子组件<code>ChildCom</code> 有了一个值为<code>HEAD</code> 的 Props 属性。</p><p>在<code>ChildCom</code> 组件中，</p><pre><code class="hljs">&#123;this.props.Stutend&#125;</code></pre><p>就将 ’HEAD‘ 添加到子组件中，在父组件调用子组件时，一起被渲染</p><h3 id="2-将-lt-input-gt-的输入传到-state-中"><a href="#2-将-lt-input-gt-的输入传到-state-中" class="headerlink" title="2. 将&lt;input /&gt; 的输入传到 state 中"></a>2. 将<code>&lt;input /&gt;</code> 的输入传到 state 中</h3><p>在最上面的<code>ChildCom</code> 组件中，我们其实是把 State 中的 参数放到了 <code>&lt;input /&gt;</code> 中，所以三个输入框的值是不可变的，接下来我们用一个函数，解决三个输入框的输入问题，先看看效果</p><p></p><p>将 <code>&lt;input /&gt; </code> 输入的值绑定到state中，这里我们在三个输入框中绑定同一个 <code>onChange</code> 函数，每一个 输入框绑定一个需要他传入到的<code>state</code> 名</p><pre><code class="hljs">import React, &#123; Component &#125; from &#39;react&#39;class ChildCom extends Component&#123;    constructor(props)&#123;        super(props);        this.state=&#123;            state_1:&#39;name&#39;,            state_2:&#39;gender&#39;,            state_3:&#39;age&#39;,        &#125;        this.handleChange=this.handleChange.bind(this)    &#125;    handleChange=(e)=&gt;&#123;        this.setState(&#123;[e.target.name]:e.target.value&#125;)    &#125;    handleClick=()=&gt;&#123;        console.log(this.state)    &#125;render()&#123;    return(    &lt;div&gt;        &#123;this.props.Student&#125;        &lt;br/&gt;        &lt;input  value=&#123;this.state.state_1&#125;                 onChange=&#123;this.handleChange&#125;                name=&#39;state_1&#39;/&gt;        &lt;br/&gt;        &lt;input  value=&#123;this.state.state_2&#125;                 onChange=&#123;this.handleChange&#125;                name=&#39;state_2&#39;/&gt;        &lt;br/&gt;        &lt;input  value=&#123;this.state.state_3&#125;                 onChange=&#123;this.handleChange&#125;                name=&#39;state_3&#39;/&gt;        &lt;br/&gt;        &lt;button onClick=&#123;this.handleClick&#125;&gt;log state&lt;/button&gt;    &lt;/div&gt;    )&#125;    &#125;export default ChildCom</code></pre><p><code>handleChange</code> 函数用来把和输入框绑定的<code>state</code> 改为当前的输入状态，我们添加一个log state 按钮来显示<code>ChildCom</code> 的 <code>state</code> ，打开控制台，点击<code>log state </code> 来看看效果</p><p></p><p>可以看到在输入的值已经传到了 <code>ChildCom</code> 的 <code>state</code> 中</p><h3 id="3-将子组件的state传到父组件的state中"><a href="#3-将子组件的state传到父组件的state中" class="headerlink" title="3. 将子组件的state传到父组件的state中"></a>3. 将子组件的state传到父组件的state中</h3><p>子组件给父组件传值就有点复杂了，我们现在父组件添加一个Button， 按下Button 触发函数打印当前父组件 state 的值，来检验传值有没有成功。</p><p>在父组件中添加一个函数，这个函数接受一个参数并把这个参数传到父组件的state<code>infoget</code> 中。</p><pre><code class="hljs">getinfo=(data)=&gt;&#123;        this.setState(&#123;infoget:data&#125;)    &#125;</code></pre><p>给子组件添加一个Props，这个Props 是一个函数，并且指向父组件的<code>getinfo</code> 函数中。</p><pre><code class="hljs">&lt;ChildCom getinfo=&#123;this.getinfo&#125; /&gt;</code></pre><p>在子组件中的输入框中添加 <code>OnBlur=&#123;this.handleBlur&#125;</code> 属性，在<code>handleBlur </code> 中将子组件的<code>state</code> 当作参数传入到 Props <code>getinfo</code> 中，下面是<code>handleBlur</code>函数</p><pre><code class="hljs">handleBlur=()=&gt;&#123;this.props.getinfo(this.state)&#125;</code></pre><p>就是说，把子组件中的<code>state</code> 当作参数，传入到子组件的Props中的一个函数中，在父组件再回调这个函数，把收到的参数传到父组件的<code>state</code> 中，即完成了一次传值。</p><p>看一下全部代码</p><pre><code class="hljs">import React, &#123; Component &#125; from &#39;react&#39;class ChildCom extends Component&#123;    constructor(props)&#123;        super(props);        this.state=&#123;            state_1:&#39;name&#39;,            state_2:&#39;gender&#39;,            state_3:&#39;age&#39;,        &#125;        this.handleChange=this.handleChange.bind(this)        this.handleBlur=this.handleBlur.bind(this)        this.handleClick=this.handleClick.bind(this)    &#125;    handleChange=(e)=&gt;&#123;        this.setState(&#123;[e.target.name]:e.target.value&#125;)    &#125;    handleClick=()=&gt;&#123;        console.log(this.state)    &#125;    handleBlur=()=&gt;&#123;        this.props.getinfo(this.state)    &#125;render()&#123;    return(    &lt;div&gt;        &lt;br/&gt;         &#123;this.props.Student&#125;        &lt;br/&gt;         &lt;input  value=&#123;this.state.state_1&#125;                 onChange=&#123;this.handleChange&#125;                onBlur=&#123;this.handleBlur&#125;                name=&#39;state_1&#39;/&gt;        &lt;br/&gt;         &lt;input  value=&#123;this.state.state_2&#125;                 onChange=&#123;this.handleChange&#125;                onBlur=&#123;this.handleBlur&#125;                name=&#39;state_2&#39;/&gt;        &lt;br/&gt;         &lt;input  value=&#123;this.state.state_3&#125;                 onChange=&#123;this.handleChange&#125;                onBlur=&#123;this.handleBlur&#125;                name=&#39;state_3&#39;/&gt;        &lt;br/&gt;         &lt;button onClick=&#123;this.handleClick&#125;&gt;log state&lt;/button&gt;    &lt;/div&gt;    )&#125;    &#125;class ParentCom extends Component&#123;    constructor(props)&#123;        super(props);        this.state=&#123;            info_1:&#39;Head&#39;,        &#125;    &#125;    getinfo=(data)=&gt;&#123;        this.setState(&#123;infoget:data&#125;)    &#125;    handleSubmit=()=&gt;&#123;        console.log(this.state)    &#125;    render()&#123;        return(            &lt;div&gt;                &lt;ChildCom                        Student=&#123;this.state.info_1&#125;                         getinfo=&#123;this.getinfo&#125; /&gt;                &#123;&lt;button onClick=&#123;this.handleSubmit&#125;&gt;submit&lt;/button&gt;&#125;            &lt;/div&gt;        )    &#125;&#125; export default ParentCom</code></pre><p>要实现子组件更新，父组件自动更新<code>state</code> , 之前把传值函数绑定到<code>onChange</code> 函数中，发现每一次更新时，会漏掉最后一位的输入，细细想了一下，<code>onChange</code> 确实有这个问题，就是说我在子组件输入‘123’，我在一次输入‘123‘，state只更新到了’12‘，’3‘要我输入下一位才能更新到 <code>state</code> 里面。看看这一次的效果</p><p></p><p>这个方法有个缺陷就是如果没有输入，或者没有点击一下输入框，父组件中<code>state</code>的值也是不会更新的，希望有人能提出更好的解决方案</p>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>前端</tag>
      
      <tag>JS;</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
